CREATE TABLE `pay_daily` (
`id` varchar(50) NOT NULL DEFAULT '',
`a_id` bigint(11) NOT NULL DEFAULT '0',
`b_id` bigint(11) NOT NULL DEFAULT '0',
`time_stamp` bigint(11) DEFAULT NULL,
`date_key` int(20) DEFAULT NULL,
`io_type` int(11) DEFAULT NULL,
`update_source` int(11) DEFAULT NULL,
`update_time` timestamp DEFAULT NULL,
PRIMARY KEY (`id`, `a_id`, `b_id`),
KEY `IDX_ID` (`a_id`, `b_id`, `time_stamp`),
KEY `IDX_DK` (`date_key`),
KEY `IDX_TENANT_POI_DATEKEY` (`a_id`, `b_id`, `date_key`),
KEY `IDX_US` (`update_source`, `a_id`)
);
explain select id, a_id, b_id, time_stamp, date_key, update_source from pay_daily where a_id=12565 and b_id=159298363 and date_key=20180731;
explain select id from pay_daily where a_id=12565 and b_id=159298363 and time_stamp=10000;
explain select id from pay_daily where update_source>12565 and a_id<159298363;
explain select id from pay_daily where date_key>12565;
explain select id from pay_daily where date_key>12565 and io_type=1;
explain select id from pay_daily where date_key>12565 and a_id<159298363;

CREATE TABLE `access_path_selection` (
`a` int,
`b` int,
KEY `IDX_a` (`a`),
KEY `IDX_b` (`b`),
KEY `IDX_ab` (`a`, `b`)
);
explain select a, b from access_path_selection where a < 3;
explain select a, b from access_path_selection where b < 3;
explain select a, b from access_path_selection where a < 3 and b < 3;

CREATE TABLE `outdated_statistics` (
`a` int,
`b` int,
`c` int,
INDEX idx_a(a),
INDEX idx_ab(a,b)
);
insert into outdated_statistics values (2, 2, 2);
insert into outdated_statistics values (3, 3, 3);
insert into outdated_statistics values (4, 4, 4);
analyze table outdated_statistics;
insert into outdated_statistics values (1, 1, 1);
insert into outdated_statistics values (1, 2, 2);
insert into outdated_statistics values (1, 3, 3);
# only update idx_ab and leave idx_a outdated.
# then the estimated number of rows on idx_ab is 1 while it's 0 on idx_a.
analyze table outdated_statistics index idx_ab;
explain select * from outdated_statistics where a=1 and b=1 and c=1;

CREATE TABLE `unknown_correlation` (
    id int,
    a int,
    PRIMARY KEY (`id`),
    INDEX idx_a(a)
);
INSERT INTO unknown_correlation values (1, 1),(2, 1),(3, 1),(4, 1),(5, 1),(6, 1),(7, 1),(8, 1),(9, 1),(10, 1),(11, 1),(12, 1),(13, 1),(14, 1),(15, 1),(16, 1),(17, 1),(18, 1),(19, 1),(20, 2),(21, 2),(22, 2),(23, 2),(24, 2),(25, 2);
ANALYZE TABLE unknown_correlation;
# Estimated row count on idx_a is 6,
# while the estimated row count on TableScan is 4.17, which is computed as below:
#   selectivity := ds.stats.RowCount / rowCount   ==> selectivity = 6 / 25
#   rowCount := prop.ExpectedCnt / selectivity    ==> rowCount = 1 / (6 / 25) = 4.17
# So the planner will pick TableScan instead of IndexScan to execute.
# But actually the cost of TableScan is 25-6+1=20 under this correlation between `id` and `a`.
EXPLAIN SELECT * FROM unknown_correlation WHERE a = 2 ORDER BY id limit 1;
